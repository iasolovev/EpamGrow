1. Исключения
Определите классы исключений PreconditionError и ComplexRootError и напишите функцию solve(a, b, c), которая:

принимает целые или вещественные коэффициенты (в противном случае возбуждает ошибку TypeError)
проверяет предусловие a!=0 (в противном случае возбужает PreconditionError)
решает уравнение с вещественными корнями (в противном случае возбуждает ComplexRootError)
возвращает кортеж из 1 или 2 корней, упорядоченных по возрастанию
исключения должны содержать информацию о том какие аргументы привели к ошибке.

пример ввода:

  1 2 1
  0.25 -2.5 6
  1 0 1
  0 1 -2
  1j 2 3
  1 2 "3"`

пример вывода:

  -1.0
  4.0 6.0
  исключение комплексные корни
  исключение нарушение предусловия
  исключение неправильные типы
  исключение неправильные типы
2. Полный переворот
В файле `input.txt` будет содержаться текст, переверните каждое слово (непробельные символы) 
задом наперёд и запишите в этот же файл.

Вы можете открыть файл на чтение-и-запись, читать построчно и сразу же записывать обработанную 
строку на исходное место; для этого пригодятся функции `file.tell()` и `file.seek()` - чтения 
и установки текущего положения.

Или же сперва прочитать весь файл, обработать, и перезаписать.

пример ввода:
    meroL  muspI  -  отэ  ,"абыр"-тскет  отсач йымеузьлопси в итачеп и .енйазид-бэв
    meroL   muspI   ястеялвя   йонтраднатс   "йобыр"   ялд   вотскет   ан  ецинитал
    с алачан IVX .акев
    В  от  ямерв йикен йыннямызеб кинтачеп ладзос юушьлоб юицкеллок воремзар и мроф
    ,вотфирш яузьлопси meroL muspI ялд иктачепсар .воцзарбо

пример вывода:
    Lorem  Ipsum  -  это  текст-"рыба",  часто используемый в печати и вэб-дизайне.
    Lorem   Ipsum   является   стандартной   "рыбой"   для   текстов   на  латинице
    с начала XVI века.
    В  то  время некий безымянный печатник создал большую коллекцию размеров и форм
    шрифтов, используя Lorem Ipsum для распечатки образцов.
3. Комстрока
Программа будет получать на вход аргументы из командной строки

Аргументы командной строки – коэффициенты и переменная полинома:

\begin{align} P(x) & = a_n \cdot x^n + a_{n-1} \cdot x^{n-1} + ... + a_1 \cdot x + a_0 \end{align}
-a                  - коэффициенты ai (float, от старшего к младшему)
-x VALUE            – величина x (float)
-v или --verbose    – выводит вычисляемое выражение "an*xn+...+a1*x+a0*1.0=p", где
                      ai - коэффициенты
                      xi - вычисленная i-я степень числа x
                      p - итоговое значение

если флаг verbose отсутствует, то скрипт просто выводит итоговое значение.


примеры ввода:
    ./script.py -a 1 2 3 -x 0
    ./script.py -a 1 2 3 -x 2 --verbose

приверы вывода:
    3.0
    1.0*4.0+2.0*2.0+3.0*1.0=11.0


для разбора аргументов применяйте пакет argparse (https://docs.python.org/3/howto/argparse.html)

ПРИМЕР ИСПОЛЬЗОВАНИЯ:
    parser = argparse.ArgumentParser()
    parser.add_argument('file')
    parser.add_argument('-q', '--question', action='store_true')
    parser.add_argument('-x', nargs='?', const=777, default=888, type=int)
    parser.add_argument('-y', nargs='?', const=111, default=222)
    parser.add_argument('-z', nargs='?', const=333, default=444)
    parser.add_argument('rest', nargs='...')

    ns = parser.parse_args('-x -z alfa hello.txt ﻿beta gamma delta'.split())
    # ns.file = 'hello.txt'
    # ns.question = False
    # ns.x = 777
    # ns.y = 222
    # ns.z = 'alfa'
    # ns.rest = ['beta', ﻿'gamma', 'delta']

    sys.argv = 'script.py -x -z alfa hello.txt beta gamma delta'.split()
    ns = parser.parse_args()  # тот же эффект`